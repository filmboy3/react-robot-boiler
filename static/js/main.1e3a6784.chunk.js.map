{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/CounterButton.js","components/Header.js","components/ErrorBoundary.js","containers/App.js","components/actions.js","components/constants.js","serviceWorker.js","components/reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","cardsArr","map","user","i","components_Card","key","console","log","SearchBox","searchField","searchChange","aria-label","type","onChange","placeholder","Scroll","props","style","overflowY","borderTop","height","children","CounterButton","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateCount","setState","state","count","nextProps","nextState","color","onClick","Component","Header","components_CounterButton","ErrorBoundary","hasError","error","info","App","onRequestRobots","_this$props","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialState","initialStateRobots","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1e3a6784.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n  const cardsArr = robots.map((user, i) => {\r\n    return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\r\n  })\r\n  console.log(\"Cardlist\");\r\n  return (\r\n      <div>\r\n        {cardsArr}\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchField, searchChange }) => {\r\n  console.log(\"Rendered SearchBox\");\r\n  return (\r\n    <div className='tc pa2'>\r\n      <input\r\n       aria-label=\"Search Robots\"\r\n       className='pa3 ba b--green bg-lightest-blue'\r\n       type='search'\r\n       onChange={searchChange}\r\n       placeholder='search robots' />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflowY: 'scroll', borderTop: '5px solid black', height: '800px' }}>\r\n      {props.children}\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass CounterButton extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.state.count !== nextState.count) {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    updateCount = () => {\r\n        this.setState(state => {\r\n            return { count: state.count + 1 }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        console.log('CounterButton')\r\n        return (\r\n            <button color={this.props.color} onClick={this.updateCount}>\r\n                Count: {this.state.count}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CounterButton;","import React, { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n    // shouldComponentUpdate(nextProps, nextState) {\r\n    //     return false;\r\n    // }\r\n    render() {\r\n        console.log('Header');\r\n        return (\r\n            <div>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <CounterButton color={'red'} />\r\n            </div>\r\n        ) \r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true })\r\n  }\r\n  \r\n    render() {\r\n      if (this.state.hasError) {\r\n        return <h1>Oooops. That is not good</h1>\r\n      }\r\n      return this.props.children\r\n    }\r\n  }\r\n\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport Header from '../components/Header';\r\nimport { connect } from 'react-redux';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../components/actions'\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n return {\r\n   onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n   onRequestRobots: () => dispatch(requestRobots())\r\n }\r\n}\r\n\r\n\r\nclass App extends Component {\r\n\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n  \r\n  render() {\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n\r\n      return isPending ? \r\n      <h1>Loading</h1> :\r\n      (\r\n        <div className='tc'>\r\n          <Header />\r\n          <SearchBox searchChange={onSearchChange}/>\r\n          <Scroll>\r\n            <ErrorBoundary>\r\n              <CardList robots={filteredRobots}/>\r\n            </ErrorBoundary>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING })\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response=> response.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING ='REQUESTS_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS ='REQUESTS_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED ='REQUESTS_ROBOTS_FAILED';","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nconst initialState = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialState, action) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return {\r\n                ...state,\r\n                searchField: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return {\r\n                ...state,\r\n                isPending: true\r\n            }\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                robots: action.payload,\r\n                isPending: false\r\n            }\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n                isPending: false\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport 'tachyons';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { searchRobots, requestRobots } from './components/reducers';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\r\nconst logger = createLogger();\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}><App/></Provider>\r\n  , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}